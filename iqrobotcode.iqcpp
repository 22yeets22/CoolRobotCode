{"mode":"Text","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT1, 1, true);\nmotor RightDriveSmart = motor(PORT6, 1, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor pewpewlauncherMotorA = motor(PORT3, false);\nmotor pewpewlauncherMotorB = motor(PORT4, true);\nmotor_group pewpewlauncher = motor_group(pewpewlauncherMotorA, pewpewlauncherMotorB);\n\nmotor vromintaek = motor(PORT10, true);\nmotor poopootighenerthingy = motor(PORT5, true);\nbumper isdownbumper = bumper(PORT12);\ntouchled touchlight = touchled(PORT2);\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool fButtonsControlMotorsStopped = true;\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n      // check the ButtonFUp/ButtonFDown status to control poopootighenerthingy\n      if (Controller.ButtonFUp.pressing()) {\n        poopootighenerthingy.spin(forward);\n        fButtonsControlMotorsStopped = false;\n      } else if (Controller.ButtonFDown.pressing()) {\n        poopootighenerthingy.spin(reverse);\n        fButtonsControlMotorsStopped = false;\n      } else if (!fButtonsControlMotorsStopped) {\n        poopootighenerthingy.stop();\n        // set the toggle so that we don't constantly tell the motor to stop when the buttons are released\n        fButtonsControlMotorsStopped = true;\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n#include \"vex.h\"  \nusing namespace vex;\n\nint intakeSpinDir = 0;\nbool firstTime = true;\n\n// Constants\nconst int lowGoal = 900;\nconst int highGoal = 1900;\n\n\nvoid event_eUp() {\n  // adjust tension to high goal\n  poopootighenerthingy.spinToPosition(highGoal, degrees);\n}\n\nvoid event_eDown() {\n  // adjust tension to low goal\n  poopootighenerthingy.spinToPosition(lowGoal, degrees);\n}\n\nvoid event_lUp() {\n  // spins the intake\n  if (intakeSpinDir == 1) {\n    // is already spinning this direciton\n    intakeSpinDir = 0;\n    vromintaek.stop();\n    return;\n  }\n  vromintaek.spin(forward);\n  intakeSpinDir = 1;\n}\n\nvoid event_lDown() {\n  // reverses the intake\n  if (intakeSpinDir == -1) {\n    // is already spinning this direciton\n    intakeSpinDir = 0;\n    vromintaek.stop();\n    return;\n  }\n  vromintaek.spin(reverse);\n  intakeSpinDir = -1;\n}\n\n\nint launcherLoop() {\n  pewpewlauncher.spin(forward);\n  while (true) {\n    if (isdownbumper.pressing()) {\n      touchlight.setColor(green);\n      if (!firstTime) {\n        vromintaek.spin(forward);\n        firstTime = false;\n      }\n      pewpewlauncher.stop();\n      while (!(Controller.ButtonRUp.pressing() || Controller.ButtonRDown.pressing())) {\n        wait(20, msec);\n      }\n      touchlight.setColor(red);\n      vromintaek.stop();\n      pewpewlauncher.spin(forward);\n      while (isdownbumper.pressing()) {\n        wait(20, msec);\n      }\n    }\n    wait(15, msec);\n  }\n  return 0;\n}\n\nint measureLoop() {\n  while (true) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"tension deg: %.2f\", poopootighenerthingy.position(degrees));\n    wait(150, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // register event handlers\n  Controller.ButtonLUp.pressed(event_lUp);\n  Controller.ButtonLDown.pressed(event_lDown);\n  Controller.ButtonEUp.pressed(event_eUp);\n  Controller.ButtonEDown.pressed(event_eDown);\n\n  wait(25, msec);\n  \n  pewpewlauncher.setVelocity(100.0, percent);\n  pewpewlauncher.setMaxTorque(100.0, percent);\n  pewpewlauncher.setStopping(hold);\n  poopootighenerthingy.setVelocity(100.0, percent);\n  poopootighenerthingy.setMaxTorque(100.0, percent);\n  poopootighenerthingy.setStopping(hold);\n  vromintaek.setVelocity(100.0, percent);\n  vromintaek.setMaxTorque(100.0, percent);\n  vromintaek.setStopping(coast);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  Drivetrain.setStopping(brake);\n\n  task measureTask(measureLoop);\n  task launcherTask(launcherLoop);\n\n  poopootighenerthingy.spinToPosition(lowGoal, degrees);  // For low goal\n\n  return 0;\n}","textLanguage":"cpp","rconfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"poopootighenerthingy","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[1,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"rev","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[3,4],"name":"pewpewlauncher","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10],"name":"vromintaek","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"poopootighenerthingy","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"}},{"port":[12],"name":"isdownbumper","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{}},{"port":[2],"name":"touchlight","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{}}],"slot":0,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"","minVersion":"3.0.0","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}
