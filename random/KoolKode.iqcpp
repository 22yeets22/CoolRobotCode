{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ncontroller Controller = controller();\nmotor LeftDriveSmart = motor(PORT12, 0.5, true);\nmotor RightDriveSmart = motor(PORT7, 0.5, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor intake = motor(PORT4, false);\nmotor catapultMotorA = motor(PORT5, false);\nmotor catapultMotorB = motor(PORT11, true);\nmotor_group catapult = motor_group(catapultMotorA, catapultMotorB);\n\nmotor tensioner = motor(PORT10, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double BrainTime = Brain.Timer.system() * 1000;\n  double BrainVoltage = Brain.Battery.voltage();\n  // Combine these values into a single integer\n  int seed = int(\n    BrainTime + BrainVoltage\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA\n      // right = AxisD\n      int drivetrainLeftSideSpeed = Controller.AxisA.position();\n      int drivetrainRightSideSpeed = Controller.AxisD.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint intakeSpin;\n\n// Constants\nconst int lowGoal = 1350;\nconst int highGoal = 1750;\n\n\nvoid highGoalTension() {\n  // adjust tension to high goal\n  tensioner.spinToPosition(highGoal, degrees);\n}\n\n\nvoid lowGoalTension() {\n  // adjust tension to low goal\n  tensioner.spinToPosition(lowGoal, degrees);\n}\n\n\nint controlLoop() {\n  int intakeSpin = 0;\n  bool buttonRUpPressed = false;\n  bool buttonRDownPressed = false;\n  bool lUpPressed = false;\n\n  while (true) {\n    // Toggle intake spin with ButtonRUp\n    if (Controller.ButtonRUp.pressing()) {\n      if (!buttonRUpPressed) {\n        buttonRUpPressed = true;\n        if (intakeSpin == -1) {\n          intake.stop();\n          intakeSpin = 0;\n        } else {\n          intake.spin(reverse);\n          intakeSpin = -1;\n        }\n      }\n    } else {\n      buttonRUpPressed = false; // Reset when button is released\n    }\n\n    // Toggle intake spin with ButtonRDown\n    if (Controller.ButtonRDown.pressing()) {\n      if (!buttonRDownPressed) {\n        buttonRDownPressed = true;\n        if (intakeSpin == 1) {\n          intake.stop();\n          intakeSpin = 0;\n        } else {\n          intake.spin(forward);\n          intakeSpin = 1;\n        }\n      }\n    } else {\n      buttonRDownPressed = false; // Reset when button is released\n    }\n\n    // Tensioner control with ButtonFUp and ButtonFDown\n    if (Controller.ButtonFUp.pressing()) {\n      tensioner.spin(reverse);\n    } else if (Controller.ButtonFDown.pressing()) {\n      tensioner.spin(forward);\n    } else {\n      tensioner.stop();\n    }\n\n    // Catapult control with ButtonLUp\n    if (Controller.ButtonLUp.pressing()) {\n      if (!lUpPressed) {\n        lUpPressed = true; // Mark the button as pressed\n        catapult.spinFor(forward, 720, degrees, false); // Non-blocking call\n      }\n    } else {\n      lUpPressed = false; // Reset when button is released\n    }\n\n    wait(20, msec); // Small delay to prevent unnecessary CPU usage\n  }\n  return 0;\n}\n\n\nint measureLoop() {\n  while (true) {\n    Brain.Screen.clearScreen();\n    Brain.Screen.setCursor(1, 1);\n    Brain.Screen.print(\"tension deg: %.2f\", tensioner.position(degrees));\n    wait(150, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  vexcodeInit();\n  \n  // register event handlers\n  Controller.ButtonEUp.pressed(highGoalTension);\n  Controller.ButtonEDown.pressed(lowGoalTension);\n\n  wait(25, msec);\n  \n  catapult.setVelocity(100.0, percent);\n  catapult.setMaxTorque(100.0, percent);\n  catapult.setStopping(hold);\n  tensioner.setVelocity(100.0, percent);\n  tensioner.setMaxTorque(100.0, percent);\n  tensioner.setStopping(hold);\n  intake.setVelocity(100.0, percent);\n  intake.setMaxTorque(100.0, percent);\n  intake.setStopping(coast);\n  Drivetrain.setDriveVelocity(100.0, percent);\n  Drivetrain.setTurnVelocity(100.0, percent);\n  Drivetrain.setStopping(brake);\n\n  tensioner.spinToPosition(lowGoal, degrees);  // For low goal\n\n  task controlTask(controlLoop);\n  task measureTask(measureLoop);\n\n  return 0;\n}\n","textLanguage":"cpp","robotConfig":[{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"tank"},"triportSourcePort":22},{"port":[12,7,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:2","direction":"rev","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[4],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"in","rev":"out"},"triportSourcePort":22},{"port":[5,11],"name":"catapult","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[10],"name":"tensioner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"}}],"slot":3,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}