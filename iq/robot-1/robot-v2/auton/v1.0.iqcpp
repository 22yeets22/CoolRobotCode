{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\nmotor LeftDriveSmart = motor(PORT1, 2, false);\nmotor RightDriveSmart = motor(PORT6, 2, true);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 173, 76, mm, 1);\nmotor intake = motor(PORT11, true);\nmotor catapultMotorA = motor(PORT4, true);\nmotor catapultMotorB = motor(PORT10, false);\nmotor_group catapult = motor_group(catapultMotorA, catapultMotorB);\n\nmotor tensioner = motor(PORT5, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double BrainTime = Brain.Timer.system() * 1000;\n  double BrainVoltage = Brain.Battery.voltage();\n  // Combine these values into a single integer\n  int seed = int(\n    BrainTime + BrainVoltage\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\n// Constants\nconst int lowGoal = 225;\nconst int highGoal = 1030;\n\n\nvoid driveForTimeout(float dist, float timeout) {\n  Drivetrain.setTimeout(timeout, seconds);\n  Drivetrain.driveFor(forward, dist, inches);\n  Drivetrain.setTimeout(0, seconds);\n}\n\nvoid launchCatapult() {\n  catapult.spinFor(forward, 720, degrees);\n}\n\n\nint main() {\n  vexcodeInit();\n\n  wait(25, msec);\n  \n  catapult.setVelocity(100.0, percent);\n  catapult.setMaxTorque(100.0, percent);\n  catapult.setStopping(hold);\n  tensioner.setVelocity(100.0, percent);\n  tensioner.setMaxTorque(100.0, percent);\n  tensioner.setStopping(hold);\n  intake.setVelocity(100.0, percent);\n  intake.setMaxTorque(100.0, percent);\n  intake.setStopping(coast);\n  Drivetrain.setDriveVelocity(50.0, percent);\n  Drivetrain.setTurnVelocity(30.0, percent);\n  Drivetrain.setStopping(brake);\n\n  intake.spin(forward);\n  tensioner.spinToPosition(lowGoal, degrees, false);  // For low goal\n\n  driveForTimeout(-50, 3);\n  \n  launchCatapult();\n  wait(0.5, seconds);\n  // tensioner.spinToPosition(lowGoal, degrees, false);\n\n  while (true) {\n    driveForTimeout(30, 2);\n    wait(1, seconds);\n    driveForTimeout(-30, 2);\n\n    wait(0.3, seconds);\n    launchCatapult();\n    wait(0.3, seconds);\n  }\n\n  return 0;\n}\n","textLanguage":"cpp","robotConfig":[{"port":[1,6,0],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"2:1","direction":"fwd","gyroType":"none","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[11],"name":"intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"in","rev":"out"},"triportSourcePort":22},{"port":[4,10],"name":"catapult","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"true","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[5],"name":"tensioner","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":2,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.7","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"target":"Physical"}